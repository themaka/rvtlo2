import type { Goal, Assessment, LearningObjective } from '../types'

export interface StrategyItem {
  title?: string
  description: string
  isFullText?: boolean
}

export interface ExportData {
  courseType: string
  courseSubject: string
  originalGoals: string[]
  approvedGoals: Goal[]
  approvedAssessments: Assessment[]
  approvedObjectives: LearningObjective[]
  parseAssessment?: (description: string) => StrategyItem[]
}

/**
 * Format the backward design framework as clean Markdown
 */
export function formatFrameworkAsMarkdown(data: ExportData): string {
  const {
    courseType,
    courseSubject,
    originalGoals,
    approvedGoals,
    approvedAssessments,
    approvedObjectives,
    parseAssessment
  } = data

  let markdown = `# Backward Design Framework\n\n`
  markdown += `**Type:** ${courseType}\n`
  markdown += `**Subject:** ${courseSubject}\n`
  markdown += `**Created:** ${new Date().toLocaleDateString()}\n\n`
  markdown += `---\n\n`

  // Original Goals
  if (originalGoals && originalGoals.length > 0) {
    markdown += `## Original Goals\n\n`
    originalGoals.forEach((goal, index) => {
      markdown += `${index + 1}. ${goal}\n`
    })
    markdown += `\n`
  }

  // Refined Goals
  markdown += `## Refined Learning Goals\n\n`
  approvedGoals.forEach((goal, index) => {
    markdown += `### ${index + 1}. ${goal.description}\n\n`
  })

  // Assessment Strategies
  markdown += `## Assessment Strategies\n\n`
  approvedAssessments.forEach((assessment, index) => {
    const relatedGoal = approvedGoals.find(g => g.id === assessment.goalId)
    markdown += `### Assessment ${index + 1}\n`
    markdown += `**Related Goal:** ${relatedGoal?.description || 'N/A'}\n\n`
    
    // Parse strategies if parser provided
    if (parseAssessment) {
      const strategies = parseAssessment(assessment.description)
      if (strategies.length > 1) {
        strategies.forEach((strategy) => {
          if (strategy.title) {
            markdown += `**${strategy.title}**\n`
          }
          if (strategy.description) {
            markdown += `${strategy.description}\n\n`
          }
        })
      } else if (strategies.length === 1) {
        const s = strategies[0]
        if (s.title) {
          markdown += `**${s.title}**\n`
        }
        markdown += `${s.description}\n\n`
      } else {
        markdown += `${assessment.description}\n\n`
      }
    } else {
      markdown += `${assessment.description}\n\n`
    }
  })

  // Learning Objectives
  markdown += `## Learning Objectives\n\n`
  
  // Group objectives by goal
  const objectivesByGoal = new Map<number, LearningObjective[]>()
  approvedObjectives.forEach(obj => {
    if (!objectivesByGoal.has(obj.goalId)) {
      objectivesByGoal.set(obj.goalId, [])
    }
    objectivesByGoal.get(obj.goalId)!.push(obj)
  })

  objectivesByGoal.forEach((objectives, goalId) => {
    const goal = approvedGoals.find(g => g.id === goalId)
    if (goal) {
      markdown += `### ${goal.description}\n\n`
      objectives.forEach((obj) => {
        markdown += `- **[${obj.bloomLevel}]** ${obj.description}\n`
      })
      markdown += `\n`
    }
  })

  markdown += `---\n\n`
  markdown += `*Generated by Backward Design Framework Builder*\n`

  return markdown
}
